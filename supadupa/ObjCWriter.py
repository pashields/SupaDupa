from SupaDupaResult import SupaDupaResult
import Writer

defaultClassTypes = {
    str(unicode) : "NSString",
    str(list) : "NSArray",
    str(int) : "NSNumber",
    str(float) : "NSNumber",
    str(bool) : "NSNumber",
    str(None.__class__) : "id"
}

def formatClassName(className):
    return unicode(capitalizeFirst(className))

def capitalizeFirst(string):
    return string[0].upper() + string[1:]

class Writer(Writer.Writer):
    def __init__(self, classDict, outputDir=None):
        self.classDict = dict([(capitalizeFirst(key), val) for key, val in classDict.iteritems()])
        self.outputDir = outputDir

    def realPropertyType(self, prop, inferred):
        cappedProp = capitalizeFirst(prop)
        if cappedProp in self.classDict.keys():
            return cappedProp
        return inferred

    def getResult(self):
        if self.outputDir is not None:
            header = self.getForwardDec()
        else:
            header = "// This class generated by Supa Dupa!"
        result = SupaDupaResult(header)

        # TODO NEED TO HAVE A REQUIREMENTS DEP GRAPH
        for className, classDef in self.classDict.iteritems():
            result.addFile(className + '.h', self.getClassHeader(className))
            result.addFile(className + '.m', self.getClassImpl(className))
        return result
    
    def getForwardDec(self):
        return "@class " + ", ".join(self.classDict.keys()) + ";"

    def getClassHeader(self, className):
        imports = ['#import "{}.h"'.format(formatClassName(header)) 
                   for header in self.classDict[className].dependencies]
        header = '\n'.join(imports)

        top = "@interface {} : NSObject".format(className)
        bottom = "@end"
        middle = []
        
        for propName, propType in self.classDict[className].properties.iteritems():
            propertyType = self.realPropertyType(propName, propType)
            propertyFormatString = "@property(nonatomic,strong){} *{};"
            middle.append(propertyFormatString.format(propertyType, propName))
        return '\n'.join([header, top, '\n'.join(middle), bottom])

    def getClassImpl(self, className):
        return "@implementation {}\n@end".format(className)

